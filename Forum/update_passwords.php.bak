<?php
// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Include database connection
require_once 'db_connect.php';

echo "<h1>Password Hashing Utility</h1>";
echo "<p>This script updates unhashed passwords to secure hashed versions.</p>";

// Function to check if a password is already hashed with bcrypt
function isAlreadyHashed($password) {
    // Check if the password starts with the bcrypt format identifier
    return (strpos($password, '$2y$') === 0);
}

// Function to output password details for debugging
function debugPassword($password) {
    $info = password_get_info($password);
    $output = "Length: " . strlen($password) . ", ";
    $output .= "Format: " . (strpos($password, '$2y$') === 0 ? 'Bcrypt' : 'Not Bcrypt') . ", ";
    $output .= "First chars: '" . htmlspecialchars(substr($password, 0, 5)) . "...', ";
    $output .= "PHP algo detection: " . ($info['algo'] !== 0 ? $info['algo'] : 'unknown');
    return $output;
}

try {
    // Get all users
    $stmt = $conn->query("SELECT id, username, password FROM users");
    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    echo "<h2>Processing Users:</h2>";
    
    $updatedCount = 0;
    $alreadyHashedCount = 0;
    
    // Process each user
    foreach ($users as $user) {
        echo "<p>Processing user: " . htmlspecialchars($user['username']) . " - ";
        
        // Debug password info
        echo "<br>Current password info: " . debugPassword($user['password']) . "<br>";
        
        // Check if password is already hashed
        if (isAlreadyHashed($user['password'])) {
            echo "<span style='color: blue;'>Password already in bcrypt format, skipping.</span></p>";
            $alreadyHashedCount++;
            continue;
        }
        
        // Store the original password for debugging
        $originalPassword = $user['password'];
        
        // Hash the password
        $hashedPassword = password_hash($originalPassword, PASSWORD_DEFAULT);
        
        // Debug output of the new hash
        echo "<br>New hashed password info: " . debugPassword($hashedPassword) . "<br>";
        
        // Update the user's password
        $updateStmt = $conn->prepare("UPDATE users SET password = :password WHERE id = :id");
        $updateStmt->bindParam(':password', $hashedPassword);
        $updateStmt->bindParam(':id', $user['id']);
        $updateStmt->execute();
        
        echo "<span style='color: green;'>Password successfully hashed and updated!</span></p>";
        $updatedCount++;
    }
    
    echo "<hr>";
    echo "<h2>Summary:</h2>";
    echo "<p>Total users processed: " . count($users) . "</p>";
    echo "<p>Users with already hashed passwords (bcrypt format): $alreadyHashedCount</p>";
    echo "<p>Users with newly hashed passwords: $updatedCount</p>";
    
    if ($updatedCount == 0 && $alreadyHashedCount > 0) {
        echo "<p style='color: green;'><strong>All passwords are already securely hashed!</strong></p>";
    } elseif ($updatedCount > 0) {
        echo "<p style='color: green;'><strong>Password hashing completed successfully!</strong></p>";
    }
    
    echo "<p><strong>Important:</strong> For security reasons, delete this file after use!</p>";
    
} catch(PDOException $e) {
    echo "<div style='color: red; padding: 10px; background-color: #ffeeee; border: 1px solid #ffcccc;'>";
    echo "<strong>Database Error:</strong> " . $e->getMessage();
    echo "</div>";
}
?>

